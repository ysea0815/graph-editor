    /**
              * 单位转换
              *
              * @param
              * @param comboBox
              */
             public void calculate(JComboBox comboBox, String text) {

                 double num;

                 IUnit unit = (IUnit) comboBox.getSelectedItem();

                 try {

                     num = Double.parseDouble(text);

                 } catch (Exception e) {

                     JOptionPane.showMessageDialog(null, "请检查输入的值!");
                     return;
                 }

                 Double number;

                 if (offset == unit.getOffset()) {
                     return;
                 }

                 if (offset > unit.getOffset()) {
                     number = num * unit.getScale();
                 } else {
                     number = num / unit.getScale();
                 }

                 table.setValueAt(number.toString(), table.getSelectedRow(), table.getSelectedColumn() - 1);
             }




             public IUnitsContext getIUnitBundleInstance() {

                 try {
                     units = ImplementationUtil.getInstanceOf(IUnitsContext.class);
                 } catch (InstantiationException e) {
                     ExceptionManager.INSTANCE.dealWith(e);
                 }

                 return units;
             }

             public IUnit getUnit() {

                 try {
                     iunit = ImplementationUtil.getInstanceOf(IUnit.class);
                 } catch (InstantiationException e) {
                     ExceptionManager.INSTANCE.dealWith(e);
                 }

                 return iunit;
             }


             /**
              * 将 collection  转换为 vector
              *
              * @param collection
              * @return
              */
             public Vector<IUnit> getVector(Collection<IUnit> collection) {

                 Vector<IUnit> vector = new Vector<IUnit>();

                 for (IUnit unit : collection) {

                     vector.add(unit);
                 }

                 return vector;
             }


             /**
              * 根据单位设置下拉框
              */
             public void setComboBoxCell(IVertexArgument rowContent, JTextField textField) {

                 Collection<IUnitBundle> unitBundles = units.getSupportUnitBundles();
                 for (IUnitBundle bundle : unitBundles) {
                     if (StringUtils.equals(rowContent.getUnit(), bundle.getID())) {
                         unitLen = getVector(bundle.getUnitFamily());
                         break;
                     }
                 }

                 comboBox = new JComboBox(unitLen);

                 createComboBox(comboBox);
                 setComboBoxListener(comboBox, textField);
             }

             /**
              * 得到单位
              *
              * @param
              * @return
              */
             public String getDefaultUnit(IVertexArgument rowContent) {

                 Collection<IUnitBundle> unitBundles = units.getSupportUnitBundles();
                 for (IUnitBundle bundle : unitBundles) {
                     if (StringUtils.equals(rowContent.getUnit(), bundle.getID())) {
                         unitLen = getVector(bundle.getUnitFamily());
                         break;
                     }
                 }

                 offset = unitLen.get(0).getOffset();

                 return unitLen.get(0).getName();
             }


             public void createComboBox(JComboBox comboBox) {
                 DefaultCellEditor cellEditor = new DefaultCellEditor(comboBox);
                 editors.add(cellEditor);
             }

             /**
              * 验证数字是否合法
              *
              * @param str
              * @return
              */
             public boolean isNumber(String str) {
                 try {
                     Expression e = new Expression(str);
                     double count = e.calculate();
                     e.getSyntaxStatus();
                     if (e.getSyntaxStatus() == SYNTAX_ERROR_OR_STATUS_UNKNOWN || Double.isInfinite(count) || Double.isNaN(count)) {
                         return false;
                     }
                     return true;
                 } catch (Exception e) {
                     return false;
                 }
             }

             /**
              * 设置文本框事件
              *
              * @param rowContent
              * @return
              */
             public JTextField setTextListener(IVertexArgument rowContent) {

                 JTextField textField = new JTextField();
                 textField.addFocusListener(new FocusListener() {

                     @Override
                     public void focusGained(FocusEvent e) {
                     }

                     @Override
                     public void focusLost(FocusEvent e) {

                         if (!isNumber(textField.getText())) {
                             JOptionPane.showMessageDialog(null, "请输入数字!");
                         } else {
                             rowContent.setValue(Double.parseDouble(textField.getText()));
                         }

                         Double b = rowContent.getValue();
                     }
                 });

                 DefaultCellEditor cellEditor2 = new DefaultCellEditor(textField);
                 editor2.add(cellEditor2);

                 return textField;
             }


             /**
              * 添加事件
              *
              * @param comboBox
              */
             public void setComboBoxListener(JComboBox comboBox, JTextField textField) {
                 comboBox.addItemListener(e -> {
                     if (e.getStateChange() == ItemEvent.SELECTED) {

         //                IUnit unit = (IUnit) comboBox.getSelectedItem();
         //                int index =  comboBox.getSelectedIndex();
         //                System.out.print(index);
                         // calculate(unit,textField.getText());
                         calculate(comboBox, textField.getText());
                     }
                 });
             }

             /**
              * 展示
              *
              * @param
              */
             public void shows() {
                 table = new JTable(model) {
                     public TableCellEditor getCellEditor(int row, int column) {
                         int modelColumn = convertColumnIndexToModel(column);
                         if (modelColumn == 2 && row < editors.size())
                             return editors.get(row);
                         if (modelColumn == 1 && row < editor2.size()) {
                             return editor2.get(row);
                         } else
                             return super.getCellEditor(row, column);
                     }
                 };
             }



             public VertexTable() {

                     getIUnitBundleInstance();
                     getUnit();

                     String[] columns = {"名称", "值", "单位", "说明"};
                     model.setColumnIdentifiers(columns);
                     shows();

                     this.addComponentListener(new ComponentAdapter() {
                         @Override
                         public void componentResized(ComponentEvent e) {
                             resizeTable(true);
                         }
                     });

                     this.setViewportView(table);
                 }

                 public void resizeTable(boolean bool) {

                     Dimension containerWidth;

                     if (!bool) {

                         containerWidth = this.getPreferredSize();
                     } else {

                         containerWidth = this.getSize();
                     }

                     int allwidth = table.getIntercellSpacing().width;

                     for (int j = 0; j < table.getColumnCount(); j++) {
                         int max = 0;
                         for (int i = 0; i < table.getRowCount(); i++) {
                             int width = table.getCellRenderer(i, j).getTableCellRendererComponent(table, table.getValueAt(i, j), false, false, i, j)
                                     .getPreferredSize().width;
                             if (width > max) {
                                 max = width;
                             }
                         }
                         int headerwidth = table.getTableHeader().getDefaultRenderer()
                                 .getTableCellRendererComponent(table, table.getColumnModel().getColumn(j).
                                         getIdentifier(), false, false, -1, j).getPreferredSize().width;

                         max += headerwidth;

                         table.getColumnModel().
                                 getColumn(j).setPreferredWidth(max);

                         allwidth += max + table.getIntercellSpacing().width;
                     }

                     allwidth += table.getIntercellSpacing().width;

                     if (allwidth > containerWidth.width) {
                         table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                     } else {
                         table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                     }
                 }